generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  image UserImage?
  books Book[]
  roles Role[]
}

model Password {
  hash String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Book {
  id            String   @id @default(cuid())
  title         String
  author        String
  year          Int
  readingStatus String
  description   String
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images BookImage[]

  // non-unique foreign key
  @@index([ownerId])
}

model BookImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId String

  // non-unique foreign key
  @@index([bookId])
}

model Permission {
  id String @id @default(cuid())
  action String // create, read, update, delete
  entity String // user, book
  access String // own, any
  description String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
  @@unique([action, entity, access])
}

model Role {
  id String @id @default(cuid())
  name String
  description String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
  users User[]
}
